{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fswiss MS Sans Serif;}{\f1\froman\fcharset2 Symbol;}{\f2\fmodern Courier New;}{\f3\froman Times New Roman;}{\f4\froman Times New Roman;}{\f5\fswiss Courier New;}}
{\colortbl\red0\green0\blue0;\red0\green0\blue255;}
\deflang1033\pard\plain\f4\fs48\b Essential Lahey Fortran 90 Documentation\plain\f4\fs24   \tab (from raw html)
\par \tab This document is divided into two sections:  \plain\f4\fs24\cf1\b\ul Overview of Essential Lahey Fortran 90.\plain\f4\fs24  This section summarizes the Essential Lahey Fortran 90 philosophy and lists the coding practices enforced by and redundant features kept out of Essential Lahey Fortran 90. \plain\f4\fs24\cf1\b\ul Developing with Essential Lahey Fortran 90.\plain\f4\fs24  This section describes the Essential Lahey Fortran 90 development process and how to build applications using the Essential Lahey Fortran 90 driver. This document doesn't teach Fortran. You'll need to know Fortran to use Essential Lahey Fortran 90.  
\par 
\par \plain\f4\fs48\b Overview of Essential Lahey Fortran 90 \plain\f4\fs28\b Philosophy of Essential Lahey Fortran 90 - A More Disciplined Fortran \plain\f4\fs24 Enforce structured, Fortran-90-standard coding. Remove redundant features. Keep all the power of the Fortran language. \plain\f4\fs28\b Stuctured Coding Practice Enforced by Essential Lahey Fortran 90 (what you have to do) \plain\f4\fs24 Fortran 90 free source form required.  IMPLICIT NONE required.  INTENT required for all subprogram dummy arguments.  INTENT(IN) must be specified for function dummy arguments.  Explicit interfaces required for all procedures.  PROGRAM statement required.  If a statement is labeled it must be referenced.  RESULT clause required on RECURSIVE FUNCTION statement.  Type declaration statements all use double colon syntax.  Program unit type and name required on END program unit statement.  Type name required on END TYPE statement.  POSITION must be specified in OPEN statement for sequential files.  CASE DEFAULT must be first or last case when present.  STOP statement required to end program.  RETURN statement required to return from subprogram.  Assumed shape required for array dummy arguments.  \plain\f4\fs28\b Unstructured or Redundant Fortran Features Kept Out of Essential Lahey Fortran 90 (what you can't use) \plain\f4\fs24 ALLOCATABLE, INTENT, POINTER, SAVE, DIMENSION, PARAMETER, and TARGET statements. Specify these attributes in the type declaration statement instead.  INTRINSIC and EXTERNAL statements. Use explicit interfaces instead.  ASSIGN, Assigned GO TO, Alternate RETURN, CONTINUE, ENTRY, and Computed GO TO statements. Use structured programming constructs instead.  INCLUDE files. Use modules instead.  DATA and BLOCK DATA. Initialize in type declaration statement or assignment statement instead.  COMMON blocks. Use modules as global data facility instead.  EQUIVALENCE. A source of many hard-to-find programming errors.  DOUBLE PRECISION statement. Declare double-precision REALs with the REAL statement.  Statement function statement. Use internal procedures instead.  PAUSE statement.  PRINT and READ * statements. Use WRITE and READ (*,*) instead.  Specific intrinsic functions. Use generics instead.  Assumed-size arrays. Use assumed-shape arrays.  DO label. Use DO-END DO.  Non-INTEGER DO variables and expressions.  Multiple statements on a line.  LOGICAL case expression.  Branch to END IF from outside IF block.  WHERE Statement. Use WHERE Construct.  BLANK specifier on OPEN or INQUIRE statement.  BN, BZ, D, H, P, S, and X edit descriptors. D exponent accepted on input at runtime.  Return to \plain\f4\fs24\cf1\ul top of page\plain\f4\fs24 .  
\par 
\par \plain\f4\fs48\b Developing with Essential Lahey Fortran 90 \plain\f4\fs24 The driver controls compilation, the creation of module libraries, linking, and the production of 32-bit, protected-mode programs. In creating 32-bit protected-mode programs, Essential Lahey Fortran 90 makes use of and binds your programs to the Phar Lap TNT DOS-Extender. The DOS-Extender functions as a layer between DOS and your application providing access to the extended memory on your computer. 
\par 
\par \plain\f4\fs36\b Running Essential Lahey Fortran 90 \plain\f4\fs24 To run the driver, type \plain\f5\fs20 elf90\plain\f4\fs24  followed by a list of one or more file names and optional command-line switches: \plain\f5\fs20 elf90 \plain\f5\fs20\i filenames [switches]\plain\f5\fs20  \plain\f4\fs24 As needed, the driver searches for the four tools (\plain\f5\fs20 ELF90_1.EXE\plain\f4\fs24 , \plain\f5\fs20 386LIB.EXE\plain\f4\fs24 , \plain\f5\fs20 386LINK.EXE\plain\f4\fs24 , and \plain\f5\fs20 REBINDB.EXE\plain\f4\fs24 ) first in the directory the driver is located and then, if not found, on the DOS path. 
\par 
\par \plain\f4\fs36\b Filenames \plain\f4\fs24 Depending on the extension(s) of the filename(s) specified, the driver will invoke the compiler or linker or both. The extension \plain\f5\fs20 .OBJ\plain\f4\fs24  causes the linker to be invoked without first running the compiler. Note: the extension \plain\f5\fs20 .MOD\plain\f4\fs24  is reserved for compiler-generated module files. 
\par 
\par \plain\f4\fs28\b Source Filenames \plain\f4\fs24 One or more source filenames may be specified, either by name or using the DOS wildcards \plain\f5\fs20 *\plain\f4\fs24  and \plain\f5\fs20 ?\plain\f4\fs24 . Filenames must be separated by a space. Example \plain\f5\fs20 elf90 *.f90 \plain\f4\fs24 If the files \plain\f5\fs20 ONE.F90\plain\f4\fs24  and \plain\f5\fs20 TWO.F90\plain\f4\fs24  were in the current directory, \plain\f5\fs20 ONE.F90\plain\f4\fs24  and \plain\f5\fs20 TWO.F90\plain\f4\fs24  would be compiled and linked together, and the stub-bound executable file, \plain\f5\fs20 ONE.EXE\plain\f4\fs24 , would be created because the driver found \plain\f5\fs20 ONE.F90\plain\f4\fs24  before \plain\f5\fs20 TWO.F90\plain\f4\fs24  in the current directory. Source filenames are specified as a complete file name or can be given without an extension, in which case Essential Lahey Fortran 90 supplies the default extension \plain\f5\fs20 .F90\plain\f4\fs24 . 
\par 
\par \plain\f4\fs28\b Object Filenames \plain\f4\fs24 The default name for an object file is the same as the source file name. If a path is specified for the source filename, the same path will be used for the object file name. If no path is specified, the current directory will be used. 
\par 
\par \plain\f4\fs28\b Output Filenames \plain\f4\fs24 The default name for the executable file produced by the driver is based on the first source or object name encountered on the command line. This may be overridden by specifying the \plain\f5\fs20 -EXE\plain\f4\fs24  switch with a new name. The default extension for executable files is \plain\f5\fs20 .EXE\plain\f4\fs24 . 
\par 
\par \plain\f4\fs36\b Switches \plain\f4\fs24 The driver and tools recognize one or more letters preceded by a hyphen (\plain\f5\fs20 -\plain\f4\fs24 ) as command-line switches. You may not combine switches: for example, \plain\f5\fs20 -x\plain\f4\fs24  and \plain\f5\fs20 -y\plain\f4\fs24  may not be entered as \plain\f5\fs20 -xy\plain\f4\fs24 . Case is not significant in switches or their arguments. 
\par 
\par \plain\f4\fs28\b Driver Configuration File (ELF90.FIG) \plain\f4\fs24 In addition to specifying switches on the command line, you may specify a default set of compiler and linker switches in the \plain\f5\fs20 ELF90.FIG\plain\f4\fs24  file. When the driver is invoked, the switches in the \plain\f5\fs20 ELF90.FIG\plain\f4\fs24  file are processed before those on the command-line. Command-line switches override those in the \plain\f5\fs20 ELF90.FIG\plain\f4\fs24  file. The driver searches for \plain\f5\fs20 ELF90.FIG\plain\f4\fs24  first in the current directory and then, if not found, in the directory in which the driver is located. 
\par 
\par \plain\f4\fs28\b Command Files \plain\f4\fs24 If you have too many switches and files to fit on the command line, your can place them in a command file. Enter Essential Lahey Fortran 90 command line arguments in a command file exactly the same manner as on the command line. Command files may have as many lines as needed. Lines beginning with # are comments. To process a command file, preface the name of the file with an @ character. When Essential Lahey Fortran 90 encounters a command line parameter that begins with @, it opens the file and processes the commands in it. Example \plain\f5\fs20 elf90 @mycmds \plain\f4\fs24 In this example, Essential Lahey Fortran 90 reads its commands from the file mycmds. Command files may be used both with other command-line switches and other command files. Multiple command files are processed left to right in the order they are encountered. 
\par 
\par \plain\f4\fs36\b Controlling Compilation \plain\f4\fs24 During the compilation phase, the driver submits specified source files to the compiler for compilation. If the -c, compile only, switch is specified, processing will stop after the compiler runs and modules are created (if necessary). Otherwise, processing continues with linking and binding. 
\par 
\par \plain\f4\fs28\b Errors in Compilation \plain\f4\fs24 If the compiler encounters errors, you may receive any of three types of error messages. \plain\f4\fs24\b Abort\plain\f4\fs24  messages indicate it is not practical to continue compilation.  \plain\f4\fs24\b Fatal\plain\f4\fs24  messages indicate the compilation will continue, but no object file will be generated.  \plain\f4\fs24\b Warning\plain\f4\fs24  messages indicate probable programming errors that are not serious enough to prevent execution.  If no fatal or abort errors are detected by the compiler, the DOS ERRORLEVEL is set to zero. Fatal errors detected by the compiler (improper syntax, for example) terminate the compilation process. An object file is not created. 
\par 
\par \plain\f4\fs36\b Compiler Switches \plain\f4\fs24 You can control compilation by using any of the following option switches. Compiler switches are not case sensitive. 
\par 
\par \tab \plain\f4\fs28\b -[n]c Suppress Linking \plain\f4\fs24 Default: \plain\f5\fs20 -nc\plain\f4\fs24  Specify \plain\f5\fs20 -c\plain\f4\fs24  to create object (\plain\f5\fs20 .OBJ\plain\f4\fs24 ), module (\plain\f5\fs20 .MOD\plain\f4\fs24 ), module name-map, or module library files without creating an executable. 
\par \tab 
\par \tab \plain\f4\fs28\b -[n]lst Listing \plain\f4\fs24 Default: \plain\f5\fs20 -nlst\plain\f4\fs24  Specify \plain\f5\fs20 -lst\plain\f4\fs24  to generate a listing file that contains the source program, compiler options, date and time of compilation, and any compiler diagnostics. The compiler outputs one listing file for each source file specified. By default, listing file names consist of the root of the source file name plus the extension .lst. 
\par 
\par \tab \plain\f4\fs24\b Syntax\plain\f4\fs24  -\plain\f4\fs24\i [\plain\f4\fs24 n\plain\f4\fs24\i ]\plain\f4\fs24 lst \plain\f4\fs24\i [\plain\f4\fs24 (\plain\f4\fs24\i spec=sval[\plain\f4\fs24 , \plain\f4\fs24\i spec = sval]\plain\f4\fs24  ... )\plain\f4\fs24\i ]\plain\f4\fs24  
\par 
\par \tab \plain\f4\fs24\b Where: \plain\f4\fs24\i spec\plain\f4\fs24  is \plain\f5\fs20 w\plain\f4\fs24  for page width, \plain\f5\fs20 l\plain\f4\fs24  for page length, or \plain\f5\fs20 f\plain\f4\fs24  for the listing file name. 
\par 
\par For w=\plain\f4\fs24\i sval\plain\f4\fs24 , the page width specifier, sval is an unsigned integer. The minimum page width is 60. If not specified, the page width is 128.  For l=\plain\f4\fs24\i sval\plain\f4\fs24 , the page length specifier, sval is an unsigned integer. The minimum page length is 20. If not specified, the page length is 57. The page length specifies the maximum number of lines that will print on a page. A page length of 0 specifies that all information is appended to the same listing page with no breaks and no subsequent headers.  For f=\plain\f4\fs24\i sval\plain\f4\fs24 , the listing file name, sval specifies the listing file name to use instead of the default. If a file with this name already exists, it is overwritten. If the file can't be overwritten, the compiler aborts. The compiler outputs one listing file for each source file specified. If the user specifies a listing file name and more than one source file (possibly using wild cards) then the driver diagnoses the error and aborts. 
\par 
\par \tab \plain\f4\fs24\b Example\plain\f4\fs24  \plain\f5\fs20 elf90 myprog -lst (w=80, l=57) 
\par 
\par \plain\f4\fs24 creates the listing file myprog.lst, formats it for a width of 80 columns and a length of 57. 
\par \tab 
\par \plain\f4\fs28\b -[n]syn Syntax Check \plain\f4\fs24 Default: \plain\f5\fs20 -nsyn\plain\f4\fs24  Specify \plain\f5\fs20 -syn\plain\f4\fs24  to stop processing source files after they have been parsed for language errors. This switch gives you a way to check quickly whether your program is syntactically and semantically correct. Any errors are displayed and written to the listing or cross-reference file(s) if specified. 
\par 
\par \plain\f4\fs28\b -[n]xref Cross-Reference Listing \plain\f4\fs24 Default: \plain\f5\fs20 -nxref\plain\f4\fs24  Specify \plain\f5\fs20 -xref\plain\f4\fs24  to generate cross-reference information in the listing file. If \plain\f5\fs20 -xref\plain\f4\fs24  is specified but not \plain\f5\fs20 -lst\plain\f4\fs24 , the listings option, then the cross reference information is output to the same .lst file but the source is not. By default, cross reference file names consist of the root of the source file name plus the extension \plain\f5\fs20 .lst\plain\f4\fs24 . 
\par 
\par \plain\f4\fs24\b Syntax\plain\f4\fs24  \plain\f4\fs24\i -[\plain\f4\fs24 n\plain\f4\fs24\i ]\plain\f4\fs24 xref \plain\f4\fs24\i [\plain\f4\fs24 (\plain\f4\fs24\i spec=sval[\plain\f4\fs24 , \plain\f4\fs24\i spec=sval]\plain\f4\fs24  ... )\plain\f4\fs24\i ]\plain\f4\fs24  
\par 
\par \plain\f4\fs24\b Where: \plain\f4\fs24 spec is \plain\f5\fs20 w\plain\f4\fs24  for page width, \plain\f5\fs20 l\plain\f4\fs24  for page length, or \plain\f5\fs20 f\plain\f4\fs24  for the listing file name. 
\par 
\par For w=\plain\f4\fs24\i sval\plain\f4\fs24 , the page width specifier, sval is an unsigned integer. The minimum page width is 60. If not specified, the page width is 128.  For l=\plain\f4\fs24\i sval\plain\f4\fs24 , the page length specifier, sval is an unsigned integer. The minimum page length is 20. If not specified, the page length is 57. The page length specifies the maximum number of lines that will print on a page. A page length of 0 specifies that all information is appended to the same cross reference page with no breaks and no subsequent headers.  For f=\plain\f4\fs24\i sval\plain\f4\fs24 , the cross reference listing file name, sval specifies the cross reference listing file name to use instead of the default. If a file with this name already exists, it is overwritten. If the file can't be overwritten, the compiler aborts. The compiler outputs one cross reference file for each source file specified. If the user specifies a cross reference file name and more than one source file (possibly using wild cards) then the driver diagnoses the error and aborts. When \plain\f5\fs20 -xref\plain\f4\fs24  is specified, the listing file contains two additional blocks of information, the Symbol Cross Reference and the Label Cross Reference. The symbol block contains a sorted list of variable and procedure names, the type, the class (array, scalar, function) and context. The label block lists the occurrences of all labels and states the reference's context. The symbol and label context is defined by the line number of the reference and a character representing the following contexts: \plain\f5\fs20 d - \plain\f4\fs24 DO index \plain\f5\fs20 = - \plain\f4\fs24 Assignment \plain\f5\fs20 i - \plain\f4\fs24 input \plain\f5\fs20 o - \plain\f4\fs24 output \plain\f5\fs20 p - \plain\f4\fs24 pointer context (pointer assign, [de]allocate, nullify) \plain\f5\fs20 r - \plain\f4\fs24 procedure argument \plain\f5\fs20 s - \plain\f4\fs24 specification statement \plain\f5\fs20 u - \plain\f4\fs24 usage context Labels use the following: \plain\f5\fs20 @ - \plain\f4\fs24 FORMAT statement \plain\f5\fs20 f - \plain\f4\fs24 FORMAT usage \plain\f5\fs20 g - \plain\f4\fs24 GO TO \plain\f5\fs20 s - \plain\f4\fs24 specification statement 
\par 
\par \plain\f4\fs24\b Example\plain\f4\fs24  \plain\f5\fs20 elf90 myprog -lst -xref (w=80, l=57, i=y) 
\par 
\par \plain\f4\fs24 creates the cross reference file myprog.lst, formats it for a width of 80 columns and a length of 57, and output cross reference information for the source file. 
\par 
\par \plain\f4\fs36\b Controlling Module Library Creation \plain\f4\fs24 The Phar Lap librarian, \plain\f5\fs20 386lib.exe\plain\f4\fs24 , is only invoked if the compiler encounters Fortran modules in the source code. For each successfully compiled module, a module file of the form \plain\f4\fs24\i filename\plain\f5\fs20 .mod\plain\f4\fs24  is created and, if the module contains executable code or variables, \plain\f4\fs24\i modname\plain\f5\fs20 .obj\plain\f4\fs24  is temporarily created. From this \plain\f4\fs24\i filename\plain\f5\fs20 .obj\plain\f4\fs24  file, the driver invokes the librarian to create a \plain\f4\fs24\i filename\plain\f5\fs20 .lib\plain\f4\fs24  file and an object file library containing the compiled module code. In addition, the file \plain\f5\fs20 modtable.txt\plain\f4\fs24  is created or appended and contains the name of the module. The name of this module library is then passed to the linker. 
\par 
\par \plain\f4\fs36\b Controlling Linking \plain\f4\fs24 During this phase, the driver submits object files, object file libraries, and module libraries to the linker for creation of the stub-bound executable. 
\par 
\par \plain\f4\fs28\b Environment Variable \plain\f4\fs24 Linker switches optionally can be placed in an environment variable named \plain\f5\fs20 386link\plain\f4\fs24 . 
\par 
\par \plain\f4\fs24\b Example\plain\f4\fs24  \plain\f5\fs20 set 386link=-lib graph90 -nomap elf90 demo.obj sub.obj 
\par 
\par \plain\f4\fs24 In this example, the linker reads two switches, \plain\f5\fs20 -lib\plain\f4\fs24  and \plain\f5\fs20 -nomap\plain\f4\fs24 , from the environment variable, \plain\f5\fs20 386link\plain\f4\fs24 . 
\par 
\par \plain\f4\fs28\b Default Filename Extensions \plain\f4\fs24 Whether on the command line or in command files, file names are specified as a complete file name (filename.ext) or can be given without an extension, in which case the linker supplies a default extension. The table below lists the default filename extensions: 
\par 
\par \plain\f4\fs24\b Default Extensions \tab 
\par 
\par \plain\f5\fs20\b File Extension  \tab  File Type     
\par \plain\f5\fs20 .obj         \tab object file     \tab 
\par .lib       \tab \tab library file     
\par .map         \tab map file     \tab 
\par .exe       \tab \tab executable file 
\par 
\par \plain\f4\fs24 A complete or partial path may be specified with the file name. The file path must follow the standard MS-DOS syntax. If no path is specified, the current default device and the directory are assumed. 
\par 
\par \plain\f4\fs28\b Searching Rules \plain\f4\fs24 The linker reads individual object files and object module libraries, resolves references to external symbols, and writes out a single executable file. The linker also creates a map file containing information about the segments and public symbols in the program. If an object module or library was specified on the command line and contains path information, then it must reside at the location specified. If the path was not specified, Essential Lahey Fortran 90 looks for the files according to the following algorithm: 
\par 
\par 1. in the current working directory 
\par 2. in any directories specified with the \plain\f5\fs20 -LIBPath\plain\f4\fs24  switch (note that \plain\f5\fs20 -LIBPath\plain\f4\fs24  searches for library files only, not object modules), or 
\par 3. in any directories specified by the \plain\f5\fs20 -LIBPath\plain\f4\fs24  switch included in the \plain\f5\fs20 386LINK\plain\f4\fs24  environment variable. 
\par 
\par \plain\f4\fs24\b Object File Searching Rules \plain\f4\fs24 Object modules specified as individual object files are processed in the order in which they appear on the command line. 
\par 
\par \plain\f4\fs24\b Library Searching Rules \plain\f4\fs24 The order in which object modules from libraries are processed is not always obvious. Essential Lahey Fortran 90 applies the following rules when searching object libraries: 
\par 
\par 1. Any libraries specified using the \plain\f5\fs20 -Lib\plain\f4\fs24  switch are searched in the order in which they appear in the Essential Lahey Fortran 90 command string before the default libraries, \plain\f5\fs20 elf90.lib\plain\f4\fs24  and \plain\f5\fs20 dosx.lib\plain\f4\fs24 . The compiler writes the Essential Lahey Fortran 90 default library names, \plain\f5\fs20 elf90.lib\plain\f4\fs24  and \plain\f5\fs20 dosx.lib\plain\f4\fs24 , into each object file it generates. 
\par 2. Each library is searched until all possible external references, including backward references within the library, are resolved. 
\par 3. If necessary, Essential Lahey Fortran 90 recursively scans the list of libraries until all external references are resolved. 
\par 
\par This algorithm is particularly important when two different object modules in two different libraries each have a public symbol with the same name. If both object modules are linked, Essential Lahey Fortran 90 signals a duplicate symbol error because they both have public symbols which are referenced elsewhere in the program. However, if the only symbol referenced in both object modules is the duplicate symbol, then only the first object module encountered is linked and no error message is generated. In this latter case, the object module which actually gets linked is determined by applying the rules listed above. 
\par 
\par \plain\f4\fs36\b Linker Switches \plain\f4\fs24 You can control linking by using any of the switches documented below. Note that linker switches may be abbreviated as indicated by the uppercase characters in the switch name. For example, the \plain\f5\fs20 -LIBPath\plain\f4\fs24  switch can be specified as either \plain\f5\fs20 -libpath\plain\f4\fs24  or \plain\f5\fs20 -libp\plain\f4\fs24 . Some switches require a number as an argument. By default, all numbers are assumed to be decimal numbers. A different radix can be specified by appending a radix specifier to the number. The following table lists the bases and their radix specifiers: 
\par 
\par \plain\f5\fs20 Base    Radix Specifier   Example of 32 in base 10   
\par 2         B or b                 10000b   
\par 8         Q or q                    40q  
\par 10         none                       32  
\par 16         H or h                    20h 
\par 
\par \plain\f4\fs24 The underscore character ("\plain\f5\fs20 _\plain\f4\fs24 ") can be used in numbers to make them more readable: \plain\f5\fs20 80000000h\plain\f4\fs24  is the same as \plain\f5\fs20 8000_0000h\plain\f4\fs24 . 
\par 
\par \plain\f4\fs28\b -[NO]BANNER \plain\f5\fs20 -BANNER\plain\f4\fs24  displays a 386|LINK copyright message with the 386|LINK version and serial number. This is the default operation. \plain\f5\fs20 -NOBANNER\plain\f4\fs24  suppresses the 386|LINK copyright message. 
\par 
\par \plain\f4\fs24\b Syntax\plain\f4\fs24  \plain\f5\fs20 -banner\plain\f4\fs24  
\par 
\par \plain\f4\fs28\b -Exe \plain\f4\fs24 The default output file name is the name of the first object file, with the \plain\f5\fs20 .exe\plain\f4\fs24  extension appended to it. The output file is not automatically placed in the current directory. By default it is placed in the same directory as the first object file listed on the command line. This switch takes a single argument, which is the path and name of the output file. If no extension is specified, .exe is assumed. If no path information is specified with the file name, then the output file is placed in the current directory. 
\par 
\par \plain\f4\fs24\b Syntax\plain\f4\fs24  \plain\f5\fs20 -Exe\plain\f4\fs24  \plain\f4\fs24\i filename\plain\f4\fs24  \plain\f4\fs24\i filename\plain\f4\fs24  is the name of the output file (including path if other than the current directory). 
\par 
\par \plain\f4\fs24\b Example\plain\f4\fs24  \plain\f5\fs20 elf90 hello.obj -exe d:\\elf90\\hello.exe elf90 main.obj -e maintest\plain\f4\fs24  
\par 
\par \plain\f4\fs28\b -Lib \plain\f4\fs24 The \plain\f5\fs20 -Lib\plain\f4\fs24  switch specifies one or more library files. The names of the library files immediately follow the switch, separated by either spaces or commas. If no filename extension is specified for a library file, the linker assumes the extension, \plain\f5\fs20 .lib\plain\f4\fs24 . The \plain\f5\fs20 -Lib\plain\f4\fs24  switch may be used multiple times in a single linker command string. the linker builds a list of the library files and processes them in the order they were specified on the command line. 
\par 
\par \plain\f4\fs24\b Syntax\plain\f4\fs24  \plain\f5\fs20 -Lib \plain\f4\fs24\i lib1[,lib2 ...]\plain\f4\fs24  \plain\f4\fs24\i lib1\plain\f4\fs24  and \plain\f4\fs24\i lib2\plain\f4\fs24  are one or more library files. 
\par 
\par \plain\f4\fs24\b Example\plain\f4\fs24  \plain\f5\fs20 elf90 hello.obj -lib mylib\plain\f4\fs24  If a library file is specified as an object input file (i.e., the \plain\f5\fs20 -Lib\plain\f4\fs24  switch is not used), the linker includes all of the object modules in the library rather than only those referenced by other parts of the program. 
\par 
\par \plain\f4\fs28\b -LIBPath \plain\f4\fs24 The \plain\f5\fs20 -LIBPath\plain\f4\fs24  switch allows specification of one or more directories to be searched for libraries. 
\par 
\par \plain\f4\fs24\b Syntax\plain\f4\fs24  \plain\f5\fs20 -LIBPath \plain\f4\fs24\i dir1[,dir2 ...]\plain\f4\fs24  \plain\f4\fs24\i dir1\plain\f4\fs24  and \plain\f4\fs24\i dir2\plain\f4\fs24  are one or more directories to be searched. 
\par 
\par \plain\f4\fs24\b Example\plain\f4\fs24  \plain\f5\fs20 elf90 main.obj -libpath d:\\mylibs -pack elf90 main.obj -libp d:\\mylibs,e:\\yourlibs -maxreal ffffh\plain\f4\fs24  Directory names specified for \plain\f5\fs20 -LIBPath\plain\f4\fs24  must not end with a "\\" or "/" delimiter. The linker will affix the directory delimiter to the file name being searched for. 
\par 
\par \plain\f4\fs28\b -[NO]Map \plain\f4\fs24 The linker map file is a text file describing the output load image. The map file contains the following information: command switches specified when the program was linked,  names of the input object files,  a list of the segments comprising the program, and  a list of the public symbols in the program.  By default, the linker produces a map file each time a program is linked. The default name of the map file is the name of the executable file, with its extension changed to \plain\f5\fs20 .map\plain\f4\fs24 . Any path information specifying a directory where the executable file is to be placed also applies to the map file. The \plain\f5\fs20 -Map\plain\f4\fs24  switch renames or relocates the map file. The switch takes a single argument, which is the path and name of the map file to be produced. If no file name extension is specified, then a default of \plain\f5\fs20 .map\plain\f4\fs24  is assumed. If no path information is specified in the map file name, then it is placed in the current directory. The linker can be prevented from producing a map file with the \plain\f5\fs20 -NOMap\plain\f4\fs24  switch. The switch takes no arguments. The \plain\f5\fs20 -NOMap\plain\f4\fs24  switch is useful to make the linker run faster, since no time is spent writing the map file. The switch is also a good way to save disk space, because map files can become quite large. 
\par 
\par \plain\f4\fs24\b Syntax\plain\f4\fs24  \plain\f5\fs20 -Map\plain\f4\fs24  \plain\f4\fs24\i filename\plain\f4\fs24  
\par 
\par \plain\f4\fs24\b Example\plain\f4\fs24  \plain\f5\fs20 elf90 moe.obj larry.obj curly.obj -m stooges elf90 hello.obj -nom\plain\f4\fs24  
\par 
\par \plain\f4\fs28\b -MAPNames \plain\f4\fs24 The \plain\f5\fs20 -MAPNames\plain\f4\fs24  switch controls the length of global symbol names displayed in the map file. By default, segment, group, class, module, and public symbol names are truncated to 12 characters in the map file. The switch takes a numeric constant argument which increases the length of global symbols in the map file to the specified number of characters. Increasing the symbol name length may cause the default maximum line width of 80 characters to be exceeded. If this occurs, the linker prints less information about segments and public symbols. This loss of information can be prevented by using the \plain\f5\fs20 -MAPWidth\plain\f4\fs24  switch. \plain\f4\fs24\b Syntax\plain\f4\fs24  \plain\f5\fs20 -MAPNames\plain\f4\fs24  \plain\f4\fs24\i nchars\plain\f4\fs24  \plain\f4\fs24\i nchars\plain\f4\fs24  is the length of global symbols in the map file, expressed as number of characters. \plain\f4\fs24\b Example\plain\f4\fs24  \plain\f5\fs20 elf90 hello.obj -mapn 30\plain\f4\fs24  
\par 
\par \plain\f4\fs28\b -MAPWidth \plain\f4\fs24 The \plain\f5\fs20 -MAPWidth\plain\f4\fs24  switch controls the maximum line width in the program map file. The switch takes a numeric constant argument which is the new maximum width for lines in the map file. 
\par 
\par \plain\f4\fs24\b Syntax\plain\f4\fs24  \plain\f5\fs20 -MAPWidth \plain\f4\fs24\i nchars\plain\f4\fs24  \plain\f4\fs24\i nchars\plain\f4\fs24  is the maximum line width in the map file, expressed as number of characters (default = 80).
\par 
\par  \plain\f4\fs24\b Example\plain\f4\fs24  \plain\f5\fs20 elf90 hello.obj -mapn 30 -mapw 120\plain\f4\fs24  
\par 
\par \plain\f4\fs28\b -MAXReal and -MINReal \plain\f5\fs20 -MAXReal\plain\f4\fs24  specifies the maximum amount of conventional memory to leave free. -MINReal specifies the minimum. TNT DOS-Extender guarantees that at least the MINReal memory is left free, and that as much as possible, up to the MAXReal memory, is left free. 
\par 
\par \plain\f4\fs24\b Syntax\plain\f4\fs24  \plain\f5\fs20 -MAXReal\plain\f4\fs24  \plain\f4\fs24\i nparagraphs \plain\f5\fs20 -MINReal\plain\f4\fs24  \plain\f4\fs24\i nparagraphs\plain\f4\fs24  \plain\f4\fs24\i nparagraphs\plain\f4\fs24  is the maximum or minimum number of 16-byte paragraphs of real-mode memory to leave free. 
\par 
\par \plain\f4\fs24\b Example\plain\f4\fs24  \plain\f5\fs20 elf90 joe -minr 128 -maxr 512 hello.exe\plain\f4\fs24  
\par 
\par \plain\f4\fs28\b -PUBList \plain\f4\fs24 The \plain\f5\fs20 -PUBList\plain\f4\fs24  switch controls the ordering of the list of public symbols. It has options to control the ordering of public symbols. They are: \plain\f4\fs24\b BYNAME \plain\f4\fs24 - Sort the list of public symbols which make up the program alphabetically. This is the default operation of the linker.  \plain\f4\fs24\b BYVALUE\plain\f4\fs24  - Sort the list of public symbols in the program by value. This option is useful when using the map file to find out what routine or variable resides at a particular memory location.  \plain\f4\fs24\b BOTH\plain\f4\fs24  - Produce two listings of the public symbols: one sorted alphabetically and one sorted by value.  \plain\f4\fs24\b NONE\plain\f4\fs24  - Cause the linker not to list the public symbols which make up the program at all. This option is useful for reducing the size of the map file.  
\par 
\par \plain\f4\fs24\b Syntax\plain\f4\fs24  \plain\f5\fs20 -PUBList BYNAME -PUBList BYVALUE -PUBList BOTH -PUBList NONE\plain\f4\fs24  
\par 
\par \plain\f4\fs24\b Example\plain\f4\fs24  \plain\f5\fs20 elf90 hello.obj -publ byvalue\plain\f4\fs24  
\par 
\par \plain\f4\fs28\b -Stack \plain\f4\fs24 The \plain\f5\fs20 -Stack\plain\f4\fs24  switch specifies the size of the stack area for a program. The switch must be followed by a numeric constant that specifies the number of bytes to be allocated to the stack. If a stack segment is already present in the program, then the \plain\f5\fs20 -Stack\plain\f4\fs24  switch changes the size of the existing segment. The linker, however, will only increase the size of the existing stack area. If an attempt is made to decrease the size of the stack area, the linker issues an error. If your program runs out of stack at runtime, increase the stack size with \plain\f5\fs20 -Stack\plain\f4\fs24 . Note that some recursive procedures can use very large amounts of stack. 
\par 
\par \plain\f4\fs24\b Syntax\plain\f4\fs24  \plain\f5\fs20 -Stack\plain\f4\fs24  \plain\f4\fs24\i nbytes\plain\f4\fs24  
\par 
\par \plain\f4\fs24\b Example\plain\f4\fs24  \plain\f5\fs20 elf90 hello.obj -s 32768\plain\f4\fs24  
\par 
\par \plain\f4\fs28\b -TwoCase and -OneCase \plain\f4\fs24 By default, the linker ignores the case of public symbols that make up the program being linked. For example, the symbols \plain\f5\fs20 abc\plain\f4\fs24 , \plain\f5\fs20 ABC\plain\f4\fs24 , and \plain\f5\fs20 aBc\plain\f4\fs24  are equivalent in the linker. The \plain\f5\fs20 -TwoCase\plain\f4\fs24  switch enables case-sensitive processing of user-defined symbols. When this switch is used, upper- and lower-case versions of the same symbol are considered to be different. \plain\f5\fs20 -OneCase\plain\f4\fs24  enforces default behavior. \plain\f4\fs24\b Example\plain\f4\fs24  \plain\f5\fs20 elf90 hello.obj -lib \\elf90\\graph90 -tc\plain\f4\fs24  
\par 
\par \plain\f4\fs28\b -[NO]WARN and -FULLWARN \plain\f4\fs24 The linker detects some conditions that can potentially cause run-time problems but are not necessarily errors. Warning messages for these conditions can optionally be generated on the display and in the map file. The linker supports three warning levels: \plain\f5\fs20 -WARN\plain\f4\fs24 , \plain\f5\fs20 -FULLWARN\plain\f4\fs24 , and \plain\f5\fs20 -NOWARN\plain\f4\fs24 . The \plain\f5\fs20 -WARN\plain\f4\fs24  switch is the default warning level of the linker. It enables warning messages for the following conditions: There is no initial stack segment in the program.  A TNT DOS-Extender switch was specified, but the output file is not an executable file.  \plain\f5\fs20 -FULLWARN\plain\f4\fs24  enables additional warning messages for the following conditions: Pieces of a single segment from different object modules having different segment attributes.  Inconsistent segment grouping in different object modules. -NOWARN disables all warning messages.  
\par 
\par \plain\f4\fs24\b Example\plain\f4\fs24  \plain\f5\fs20 elf90 hello.obj -warn\plain\f4\fs24  
\par 
\par \plain\f4\fs28\b -[NO]ZUnInit \plain\f4\fs24 By default, the linker automatically initializes all data areas that are not initialized by your Essential Lahey Fortran 90 code to zero when creating the executable image. If you do not care if your uninitialized data areas are initialized to zero, use the -NOZUI switch to make your link time up to 50% shorter. 
\par 
\par \plain\f4\fs36\b Controlling Binding \plain\f4\fs24 During this last phase, the stub-bound executable is bound to the DOS-Extender creating a stand-alone, 32-bit protected-mode executable program. By default, the linker automatically stub-binds your program. When you run your program from the DOS command line, this stub-loader first starts the DOS-Extender, which in turn starts your program. Note: in order to distribute executable files created with Essential Lahey Fortran 90, you must buy the complete \plain\f4\fs24\cf1\ul Essential Lahey Fortran 90\plain\f4\fs24  product. 
\par 
\par \plain\f4\fs36\b Binder Switches 
\par 
\par \plain\f4\fs28\b -[N]BIND \plain\f4\fs24 Default: \plain\f5\fs20 -nbind\plain\f4\fs24  Specify \plain\f5\fs20 -bind\plain\f4\fs24  to instruct the driver to invoke \plain\f5\fs20 rebindb.exe\plain\f4\fs24 . \plain\f5\fs20 rebindb.exe\plain\f4\fs24  will make a copy of the DOS-Extender that is bound into \plain\f5\fs20 rebindb.exe\plain\f4\fs24  itself and bind that copy to your program. 
\par 
\par \plain\f4\fs24\b Example\plain\f4\fs24  \plain\f5\fs20 elf90 demo -bind\plain\f4\fs24  In the example, the driver invokes \plain\f5\fs20 rebindb.exe\plain\f4\fs24  to create \plain\f5\fs20 demo.exe\plain\f4\fs24 , a fully bound executable program. 
\par 
\par 
\par \plain\f2\fs20 
\par }
 