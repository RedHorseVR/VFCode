[COMPILE_BUTTON]
	CONSOLE: C:\MSDEV\COMPILE.BAT  <ExportFileName>    |Compile
[BUILD_BUTTON]
	CONSOLE: c:\MSDEV\glLink.BAT <ExportFileName>.   |Link
[RUN_BUTTON]
	CONSOLE: <ExportFileName>.exe		   |Run local .exe
[DEFAULT_EXTENSION]
	.c
[HELP_BUTTON]
	Mscxx.hlp	 					|C and C++ Language 
[HELP]
	F:\US&R\DEVELOP\_Insecta_\insecta2\README.HLP	|Read Me 
	F:\US&R\DEVELOP\_Insecta_\insecta2\TUTORIAL.HLP |Tutorials
	SEPARATOR
	Vcsdk15.hlp	 |SDK Version 1.5 
	Mscxx.hlp	 |C and C++ Language 
	vb.hlp		 |Visual Basic 
[TOOLS]
	EXPLORER.EXE  <CurrentDir>				|Explore Current Directory
	explorer.exe  C:\MSDEV		|MSDEV directory
						SEPARATOR
	CONSOLE: c:\msdev\resource.bat <ExportFileName>.rc |Compile Resources
						SEPARATOR
	c:\msdev\bin\Msdev.exe 		<ExportFileName>.mdp			|Microsoft Visual C++
	c:\BCPro95\BCPRO.EXE					|Bounds Checker
	c:\program files\insecta\insecta2.exe c:\msdev\cl.ins 	|C/C++ Compiler Batch File
						SEPARATOR
	CONSOLE:   					|Start Console
	C:\WINdows\COMMAND.COM   				|DOS Shell
	C:\WINdows\RSRCMTR.EXE				|Resource Meter
	C:\Program Files\Accessories\BACKUP.EXE		|Backup
	C:\WINdows\CALC.EXE				|Calculator
	C:\WINdows\CLIPBRD.EXE				|Clipbaord Viewer
	C:\WINdows\CDPLAYER.EXE				|CD Player
	c:\WINdows\pbrush.exe				|Paint Brush
						SEPARATOR
	c:\MSDEV\BIN\WIN95\PVIEW95.EXE  		|Process Viewer
	c:\MSDEV\BIN\SPYXX.EXE 				|Spy++
	C:\WINdows\SYSMON.EXE				|System Monitor

[VARIABLES]
	FILE *fp;
	char
	char *tok;
	char *s=strrchr(buff,'.');
	int    i=0;
	int    j=0;
	int    fwKeys = 0, xPos = 100, yPos = 100;
	extern int fwKeys = 0, xPos = 100, yPos = 100;
	float  f=0.0;
	double d=0.0;
	unsigned long L=0;
	unsigned int  K=0;
	char   buff[256];
	unsigned 
	class	
	extern
	static
	HWND H;
	RECT r;
	void
	inline
	int
	float	
	double
	extern
	int  i;
	NULL;
	TRUE;
	FALSE;
	#define 
[INPUT]	
	class  {  $|$ };   // end class
	void main() {  $|$ } //end main()
	void   :: (){  $|$ }
	int    :: (){  $|$ }	
	char   :: (){  $|$ }
	float  :: (){  $|$ }
	double :: (){  $|$ }
	int    (){  $|$ }
	void   (){  $|$ }
	double (){  $|$ }
	char   (){  $|$ }
	inline void   (){  $|$ }
	inline char   (){  $|$ }
	inline int    (){  $|$ }
	inline float  (){  $|$ }
	inline double (){  $|$ }
	LRESULT CALLBACK DlgProc(HWND hDlg,UINT uMessage,WPARAM wParam,LPARAM lParam){  $|$ }
	public:
	private:
	protected:
	inline
	/* includes */
	/* defines */
	/* externals */
	/* prototypes */
	/* globals */
	/* inlines */
	/* end class */
[END]
	}; /* end of class */
	};
	}
	return TRUE;
	return TRUE; }
	return FALSE;
	return FALSE; }	
	return NULL;
	return NULL; }
	break;
	break; }
	return ;
	return ;}
	return (float)0.0; }
	return 0.0; }
	exit(0);
	public:
	protected:
	private:
	public:
	protected:
	private:
	inline
[EVENT]
	inline void
	inline int
	inline double
	inline char 
	inline char *
[PROCESS]
	getchar( );
	printf("\nHello World of Insecta!\n");
	getchar( );
	wsprintf( ," " );
	wsprintf(buff," " );
	fprintf( fp ," " );
	fgetc( fp );
	Sleep(50);
	fopen( " " , " " );
	fclose( fp );
	ungetc( , );
	strcat( , );
	strcpy( , );
	strstr( , );
	strchr( , );
	strrchr( , );
	strlen( );
	SendMessage( ,WM_COMMAND, , );
	PostMessage( ,WM_COMMAND, , );
	DialogBox( hInst , "RESOURCE" , hWnd , (DLGPROC) DlgProc );
	CreateDialog( hInst , "RESOURCE" , hWnd , (DLGPROC) DlgProc );
	GetWindowRect( hDlg , &r );
	GetClientRect( hDlg , &r );
	MessageBox( H , " message ", " title ", MB_OK);
	SetWindowPos( H , HWND_NOTOPMOST , 0 , 0 , 10 , 10 , SWP_NOMOVE|SWP_NOSIZE );
	SetActiveWindow( H );
	ShowWindow( H , SW_RESTORE );
	MessageBeep( MB_OK ); 
	error( "testing" );
	debug( "testing" );
[OUTPUT]	
	#include
[SET]
	FILE *fp;
	void
	char c;
	*tok = NULL;
	*tok = strstr( s , TOKEN ); 
	char *s=NULL;
	char buffer;
	int	
	int i=0;
	i++;
	float	
	double
	class	
	extern
	fwKeys = wParam; 
	xPos = LOWORD(lParam); 
	yPos = HIWORD(lParam);       
	HWND
	RECT r;
	#define 
 	#include ".h"
	#include "resource.h"
	#include <conio.h>
	#include <string.h>
	#include <stdlib.h>
	#include <stdio.h>
	#include <windows.h>
	#include <insecta.h>
	{
	}
	/*
	*/
[LOOP]
	while( ){  		$|$ }
	do{        		$|$ }while( );
	for( ){    		$|$ }
	for(i=0; i<10; i++ ){   $|$ } 
[LEND]
	}  // end while
	}while();
	}  // end for
	}  // end for
[BRANCH]
	if( ) $|$ { $|$ }else{ $|$ }
	if( ) $|$ { $|$ }
	switch( ){
	switch(uMessage) { $|$case WM_INITDIALOG: $|$ case WM_COMMAND: $|$case WM_CLOSE: $|$ }
	switch(wParam) {   $|$ case ID_HELP_ABOUT: $|$ case IDCANCEL:   $|$ case IDOK:  $|$ }
	if( IsIconic( MainWindow ) ) $|$ { $|$ }else{ $|$ }
	#ifdef  $|$ #enfif
	#ifndef $|$ #endif
	switch(uMessage) {
	switch(wParam) {
	switch(HIWORD(wParam)) {
	switch(LOWORD(wParam)) {
	struct MyStruct { $|$ /* methods */ $|$ /* data */ $|$ }; /* end of struct */
[PATH]
	{
	case WM_CREATE:	
	case WM_INITDIALOG:
	case ID_HELP_ABOUT:
	#else
	#else
	}else{
	case IDCANCEL:
	case IDOK:
	case :
	case WM_MOUSEMOVE:
	case WM_COMMAND:
	case WM_NOTIFY:
	case WM_CLOSE:
	case WM_SIZE:
	default:
	/* methods */
	/* data */
[BEND]
	}
	#endif
	#endif

[COMMENTS]
/*
*/
[CASE_SENSITIVE]
[MATCH_ORDER]
[]
