[COMPILE_BUTTON]
	CONSOLE: c:\hc11compiler\compile.bat  <ExportFileName>.   FILENAMESTART(file |HC11 Cross Compile
[BUILD_BUTTON]
[]
	CONSOLE: c:\HC11compiler\assemble.bat <ExportFileName>.a11	FILENAMESTART:(file  |HC11 Cross Assemble
[RUN_BUTTON]
[]
	CONSOLE: c:\hc11compiler\objfile.BAT <ExportFileName>.    FILENAMESTART:(file |Link and Generate HC11 .s Record File
[DEFAULT_EXTENSION]
	.c
[HELP_BUTTON]
	c:\hc11compiler\docs\ICC11.HLP|ICCH11 C compiler readme++ files
[TOOLS]
	EXPLORER.EXE  c:\hc11compiler			|Explore HC11 Directory
						SEPARATOR
	C:\HC11\sim68\SIM68.exe |68HC11 SIMULATOR
						SEPARATOR
	c:\program files\insecta\insecta2.exe c:\hc11compiler\compile.ins  |Compile Settings
	c:\program files\insecta\insecta2.exe c:\HC11compiler\assemble.ins  |Assemble Settings
	c:\program files\insecta\insecta2.exe c:\hc11compiler\objfile.ins  |Link and Generate HC11 .s Settings
						SEPARATOR
	CONSOLE:   					|Start Console
	C:\WINdows\COMMAND.COM   			|DOS Shell
	C:\WINdows\RSRCMTR.EXE				|Resource Meter
	C:\Program Files\Accessories\BACKUP.EXE		|Backup
	C:\WINdows\CALC.EXE				|Calculator
	C:\WINdows\CLIPBRD.EXE				|Clipbaord Viewer
	C:\WINdows\CDPLAYER.EXE				|CD Player
	C:\TOOLs\QUICKRES.EXE				|Quick Resolution
	c:\WINdows\pbrush.exe				|Paint Brush
						SEPARATOR
	h:\MSDEV\BIN\WIN95\PVIEW95.EXE  		|Process Viewer
	h:\WINdows\SYSMON.EXE				|System Monitor
[HELP]
	Mscxx.hlp	 |C and C++ Language 
[VARIABLES]
	FILE *fp;
	char
	char *tok;
	char *s=strrchr(buff,'.');
	int    i=0;
	int    j=0;
	float  f=0.0;
	double d=0.0;
	char   buff[256];
	class	
	extern
	static
	void
	NULL;
	TRUE;
	FALSE;
	#define 
[INPUT]	
	void   main() { $|$ }
	int    func() { $|$ }
	void   func() { $|$ }
	double func() { $|$ }
	char   func() { $|$ }
	/* includes */
	/* defines */
	/* externals */
	/* prototypes */
	/* globals */
	/* end class */
[END]
	};
	}
	return FALSE; }	
	return NULL; }
	return (float)0.0; }
	return 0.0; }
	return TRUE; }
	}
	break;
	break;}
	return ;
	return ;}
	}
	return TRUE;
	return FALSE;
	return NULL;
	exit(0);
[PROCESS]
	getchar( );
	fgetc( fp );
	fopen( " " , " " );
	fclose( fp );
	ungetc( , );
	strcat( , );
	strcpy( , );
	strstr( , );
	strchr( , );
	strrchr( , );
	strlen( );
	error( "testing" );
	debug( "testing" );
[OUTPUT]	
	#include
[SET]
	FILE *fp;
	void
	char c;
	char *tok;
	char *tok = strstr( s , TOKEN ); 
	char *s=NULL;
	char buffer;
	int	
	int i=0;
	i++;
	float	
	double
	extern
	#define 
 	#include".h"
	#include"resource.h"
	#include <string.h>
	#include <stdlib.h>
	#include <stdio.h>
	{
	}
	/*
	*/
[LOOP]
	while( ){
	do{
	for( ){
	for(i=0; i<10; i++ ){
[LEND]
	} 
	}while();
	} 
	}  
[BRANCH]
	if( )  $|$ { $|$ }else{ $|$ }
	if( )  $|$ { $|$ }else if(  ) { $|$ }else{ $|$ }
	if( c!= EOF )  $|$ { $|$ }else{ $|$ }
	if( ) $|$ { $|$ }
	switch( ){ $|$ case : $|$ default: $|$ }
	if( )
	switch( ){
	switch(uMessage) {
	switch(wParam) {
	if( IsIconic( MainWindow ) )
	#ifdef
	#ifndef
	switch(uMessage) {
	switch(wParam) {
	switch(HIWORD(wParam)) {
	switch(LOWORD(wParam)) {
[PATH]
	{
	case :	
	case WM_INITDIALOG:
	case ID_HELP_ABOUT:
	#else
	#else
	}else{
	case IDCANCEL:
	case IDOK:
	case :{
	case WM_COMMAND:
	case WM_NOTIFY:
	case WM_CLOSE:
	case WM_SIZE:
	default:
[BEND]
	}
	#endif
	#endif

[COMMENTS]
/*
*/
[CASE_SENSITIVE]
[MATCH_ORDER]
[]
