;  IRL FlowCode Version: Version 10.0
;  c1995-2015: Visual Flow Coder by 2LResearch
;
;  File Name : vfcfind.pl.vfc
;  File Date : 12:03:29 PM - 28:Jul:2025

event(use File::Find;);//// //////
event(use File::Basename;);// ////
event(use File::Find::Rule;);// ////
set($HIT_TOTAL = 0;);//
end();//
set(my $ps;);//// //////

input(sub start_powershell {);// ////
end(return if $ps;);// ////
generic();// // Open a persistent PowerShell process//
generic(open($ps, '|-', 'powershell -Command -') or die "Can't start PowerShell: $!";);// ////
generic(select((select($ps), $| = 1)[0]);  );// // Autoflush to make output instant//
end(});//// //////

input(sub cprint { );// ////
generic(my ($text, $color) = @_; );// ////
generic();// // Escape any single quotes in the text to prevent PowerShell issues //
generic(start_powershell();  );// // Ensure PowerShell is running//
generic();// // Escape any single quotes//
generic($text =~ s/'/'\''/g;);// ////
set();//// // Send the command to PowerShell////
output(print $ps "Write-Host '$text' -ForegroundColor $color\n";);// ////
end(});// 
set($default = "\e[0m" ;);//resets to default color
generic(my $reset     = "\e[0m";);// ////
generic(my $bold      = "\e[1m";);// ////
generic(my $black     = "\e[30m";);// ////
generic(my $red       = "\e[31m";);// ////
generic(my $green     = "\e[32m";);// ////
generic(my $yellow    = "\e[33m";);// ////
generic(my $blue      = "\e[34m";);// ////
generic(my $magenta   = "\e[35m";);// ////
generic(my $cyan      = "\e[36m";);// ////
generic(my $white     = "\e[37m";);// ////
generic();// // Bright variants//
generic(my $bright_red     = "\e[1;31m";);// ////
generic(my $bright_green   = "\e[1;32m";);// ////
generic(my $bright_yellow  = "\e[1;33m";);// ////
generic(my $bright_blue    = "\e[1;34m";);// ////

input(sub GetLines{ local ( $filename , $word_to_find  , $type ) = @_;);//
generic(open(my $fh, '<', $filename) or die "Could not open file '$filename' $!";);// ////
generic(my $line_number = 0;);// ////
set($found = 0;);//
output();//print( "******************** $type \n\n  " );
set($VFCtoken = "^(generic|variable|input|event|process|set|output|loop|lend|branch|path|bend|end)" ;);//
loop(while (my $row = <$fh>) {);// ////
generic();// // Remove ANSI escape sequences //
generic($row =~ s/\x1B[\(\)][0-9A-Za-z]*//g;);//  # Extra escape variations
generic($row =~ s/[^\x20-\x7E\r\n\t]//g;         );// // Removes non-printable, keeps tabs/newlines//
branch(if ($row =~ /[^\x00-\x7F]/   || $row =~ m/\x/ ));//if ($row[$i] !~ /^[\x01-\x7F]*$/)
path( {);//
end(next ;);//// //////
set();//
path(} else { );//
bend( });//
generic($line_number++;);// ////
set(if(  $EXTEN =~ m/vfc/i  ) { $row =~ s/$VFCtoken// } ;);//<---- CLEANS THE TOKEN FOR vfc FILE ONLY 
set();//$tok = $& ;
set();//$row =~ s/;\/\/.*// ;
set($row =~ s/\n// ;);//
branch(if($row =~ m/$word_to_find/) {);///// ////////if($row =~ /\b$word_to_find\b/) {
path();//
branch(if ( $type =~ m/$VFCtoken/  &&  $EXTEN =~ m/vfc/i   ));//
path( {);//
branch(if ( $tok =~ m/^$type/ ));//
path( {);//
set($found += 1;);//
branch(if ( $EXTEN =~ m/vfc/i  ));//
path( {);//
output();//print "$bright_green";
output(print "\tvfc $filename  $line_number\t$default|--------> $tok$row;\n";);//
bend( });//
path( }else{);//
bend( });//
path( }else{);//
set($found += 1;);//
branch(if ( $EXTEN =~ m/vfc/i  ));//
path( {);//
output();//print "$green";
output(cprint( "\tvfc $filename  $line_number\t$default|---- $EXTEN ----> $tok$row;" , 'red'  ););// ////
path(} else {);//
branch(if (-e "$filename.vfc" ));//
path( { );//
output();//print "$cyan";
output(cprint ( "\tvfc $filename   $line_number\t$default| line: $line_number  ---$EXTEN ----> $tok$row", 'cyan' ););// ////
path( } elsif( $filename !~ /\.vfc$/ ) {);//
output();//print "$yellow";
output(cprint ( "\tvfc $filename   $line_number\t$default| line: $line_number  ---$EXTEN ----> $tok$row" , 'yellow'  ););// ////
bend( } );//
bend( });//
bend( });//
bend(});//// //////
output();//print "$reset";
lend(});//// //////
generic(close($fh););// ////
branch(if ( $found > 0  ));//
path( {);//
output(print "\n\tVFC LOC: $line_number :: $found HIT(s)\n\n";);//
set($HIT_TOTAL += $found ;);//
bend( });//
end(return $line_number; });//
set($EXTEN  = "\.vfc" ;);// 

input(sub process_files{ my( $dir , $word , $type , $size_args ) = @_;);//
generic(opendir(DIR, $dir) or die "Could not open $dir in process_files \n";);// ////
set($total_lines  = 0;);//
set($FIRST_HIT = "True" ;);//
loop(while (my $file = readdir(DIR)) {);// ////
output( );//print ( "\tvfc $file  \n" );
branch(if ( $EXTEN =~ m/files/ ));//
path( { );//
output( );//print ( "\tvfc $file == $word \n" );
branch(if ( $file =~ m/$word/ && $file !~ m/^_/ &&  $file !~ m/\.vfc$/ ));//
path( { );//
branch(if (-e "$dir/$file.vfc" ));//
path( { );//
output(print "-->";);//print "$cyan";
path( }else{ );//
output();//print "$yellow";
bend( } );//
output(print ( "\tvfc $dir/$file  \n" ););// 
path(} else { );//
bend( } );//
path( }else{ );//
branch(if ( ( $file =~ m/$EXTEN$/i  ||  '*' =~ m/$EXTEN$/i   ) &&   -f "$dir/$file") {);// if ( $file =~ m/$EXTEN$/i    &&   -f "$dir/$file") {
path();//
set();//$FOLDER_FIRST_HIT = "False";
set();//
set($VFCfile = "$dir\\$file" ;);//
set($VFCfile  =~ s/\\\//\\/;);//
output();//print "   <$EXTEN> \n";
generic($ROOT = basename( $VFCfile ) ;);// 
branch(if (  (  $ROOT !~ /^[_]/ ) ));//if ( $VFCfile =~ m/$EXTEN$/i  && (   ".vfc" =~ m/$EXTEN$/i   ||  $ROOT !~ /^[_]/ ) )
path( {);//
set($VFCfile =~ tr|/|\\|;);//
branch(if ( ".vfc" =~ m/$EXTEN/i   &&  ".*" !~ m/$EXTEN/i   ));//
path( { );//
output(print "$bright_blue";);//
output( print "vfc2000 $VFCfile\n";);// print "=====================\n";
output(print "$default";);//
bend( } );//
process($lines = GetLines( $VFCfile , $word , $type  ) ;);//
output( );//if ( $FIRST_HIT == "True" && length($lines)>0 ) { print "<$EXTEN> $VFCfile\n"; $FIRST_HIT = "False";}
set($total_lines  += $lines ;);//
output( );//print "$VFCfile $lines\n";
bend( });//
bend(});//// //////
bend( } );//
lend(});//// //////
generic(closedir(DIR););// ////
end(return $total_lines  ;   });//

input(#main);//// // Print the directories ////
event(use Cwd;);// ////
event();//my $dir = shift @ARGV or die "Usage: $0 <directory>\n";
set(my $dir = "";);//
set(my $word = "";);//
generic(my $size = $#ARGV + 1;);//
output(print "The size of \@ARGV is $size\n";);//
branch(if ( $size >=  1) {);// ////
path();// // Get the directory and file names from the arguments //
set($A = $ARGV[0] ;);//
set($A1 = $ARGV[1] ;);//
set($A2 = $ARGV[2] ;);//
output(print "args: $A, $A1, $A2 --- @ARGV \n";);//
generic($EXTEN= ($A =~ /\.([\w\*]+)$/) ? "\.$1" : "";);// 
branch(if ($EXTEN) {);// 
path();//
output(print "Scanning for $EXTEN ....\n\n";);//// //
generic( $dir = ".";);//
generic($word = $ARGV[1];);//\
generic($type = $ARGV[2];);//\
output(print "begin at $dir\nlooking for: $word\n";);//
path(} else {);//// //////
set($EXTEN  = "\.vfc"  ;);// 
output(print "Scanning for $EXTEN  ....\n\n";);// 
branch(if ( -d $ARGV[0] ));//
path( {);//
generic( $dir = $ARGV[0];);//
generic($word = $ARGV[1];);//\
generic($type = $ARGV[2];);//\
generic( );//$flag = $ARGV[3];
path( }else{);//
output(print "default dir\n\n";);//
generic( $dir = ".";);//
generic($word = $ARGV[0];);//\
generic($type = $ARGV[1];);//\
output(print "begin at [$dir]\nlooking for: $ARGV[0]\n\n";);//
generic();//$flag = $ARGV[2];
bend( });//
bend(});//// //////
path(}else{);//
set();//
output(print( "\nUseage: @0  [directory=$cdw]  <search term> [vfc_type]\n" ) ;);//
output(print( "\n\tWhere:vfc_type = {input,event,process,set,output,loop,lend,branch,path,bend,end,generic}\n" ) ;);//
end(exit);//
bend(});//
process();//process_files( "$dir" , $word  , $type ) ;
generic();// // Use glob to get all the files and directories in the path //
generic(my @list_of_files = glob("$dir/*"););// 
process(my @list_of_files =  File::Find::Rule->directory->in($dir););//
event(use File::Find;);// ////
generic(my @safe_dirs;);// ////

input(my $wanted = sub {);// ////
end(return unless -d;);// ////
end(return if $File::Find::name =~ /\/?build\//;);// // skip any build/ //
end(return if $File::Find::name =~ /\/?CMakeFiles\//;);// // skip CMake garbage //
generic(push @safe_dirs, $File::Find::name;);// ////
end(};);//// //////
process(find($wanted, '.'););//// //////
generic();// // Debug it: //
output();//print "$_\n" for @safe_dirs;
generic(my @safe_dirs;);// ////
generic(@list_of_dirs = @safe_dirs;);// ////
output(print "\n==============================================================\n";);// 
generic(my $cwd = getcwd(););// ////
output(print( "Curent directory: $cwd \n" ););//
output(print "\n==============================================================\n";);// 
output(print( "<directory=$dir>  type=<$EXTEN> <search term=$word> <vfc_type=$type>\n" ) ;);////// ////////
output(print( "\tvfcfind .* \tkeyword - looks for all file types of ANY ext for <keyword>\n" ) ;);//
output(print( "\tvfcfind .ext \tkeyword - looks for all file types of .ext for <keyword>\n" ) ;);//
output(print( "\tvfcfind  \tkeyword - looks for all VFC files for <keyword>\n" ) ;);//
output(print( "\tvfcfind .files \tkeyword - looks for all filenames with <keyword>\n" ) ;);//
output(print "==============================================================\n\n";);// 
output( );//print "TOP FOLDER ============> $dir\n";
process();//$lines = process_files( "$dir" , $word , $type ) ;
output();//print "\t--------------> $dir  :  $lines \n\n";
set($TotalLines += $lines;);//
generic();// // Filter out the directories using the -d file test operator //
process(my @list_of_dirs = grep { -d } @list_of_files;);//
loop(foreach my $dir (@list_of_dirs) {);//
branch(if ( $dir =~ m/BackupVFC/ || $dir =~ m/BSP_/ || $dir =~ m/build/ || $dir =~ /^\./ ));//
path( {);//
output();//print( "\t\t---->Skipping ... $dir\n"  );
path(} else {);//
output( );//print "FOLDER==> $dir:\n";
process($lines = process_files( "$dir" , $word , $type , $size ) ;);//
set($TotalLines += $lines;);//
output();// print "Lines of VFC in $dir  :  $lines \n\n";
bend( });//
lend(});//// //////
set();//sleep(5);
output(print( "\n\n==> <directory=$dir>  type=<$EXTEN> <search term=$word> <vfc_type=$type>\n" ) ;);// 
output(print "==> TOTAL SCANNED LOC: $TotalLines :: HITS: $HIT_TOTAL \n";);// 
end();//



;INSECTA EMBEDDED SESSION INFORMATION
; 255 16777215 65280 16777088 16711680 8454143 13158600 0 255 255 9895835 8454143 7274551
;    vfcfind.pl   #   .
; notepad.exe
;INSECTA EMBEDDED ALTSESSION INFORMATION
; 1329 146 2494 1620 218 87   254   4294965834    perl.key  0