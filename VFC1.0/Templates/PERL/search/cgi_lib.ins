;  IRL FlowCode Version: Beta Version 3.6 - October 1997
;  c1995-1998: Visual FlowCoder and FlowCode is a tradename of FlowLynx / Ublige 
;
;  File Name : cgi_lib.ins
;  File Date : 04:18:47 PM - 18:Dec:2000

generic(    );//# Perl Routines to Manipulate CGI input
generic(    );//# S.E.Brenner@bioc.cam.ac.uk
generic(    );//# $Id: cgi-lib.pl,v 2.14 1996/10/20 12:41:02 brenner Exp $
generic(    );//#
generic(    );//# Copyright (c) 1996 Steven E. Brenner
generic(    );//# Unpublished work.
generic(    );//# Permission granted to use and modify this library so long as the
generic(    );//# copyright above is maintained, modifications are documented, and
generic(    );//# credit is given for any use of the library.
generic(    );//#
generic(    );//# Thanks are due to many people for reporting bugs and suggestions
generic(    );//# especially Meng Weng Wong, Maki Watanabe, Bo Frese Rasmussen,
generic(    );//# Andrew Dalke, Mark-Jason Dominus, Dave Dittrich, Jason Mathews
generic(    );//# For more information, see:
generic(    );//# http://www.bio.cam.ac.uk/cgi-lib/
set(  $cgi_lib'version = sprintf("%d.%02d", q$Revision: 2.14 $ =~ /(\d+)\.(\d+)/);  );//
generic(    );//# Parameters affecting cgi-lib behavior
generic(    );//# User-configurable parameters affecting file upload.
set(  $cgi_lib'maxdata = 131072;   );//# maximum bytes to accept via POST - 2^17
set(  $cgi_lib'writefiles = 0;   );//# directory to which to write files, or
generic(    );//# 0 if files should not be written
set(  $cgi_lib'filepre = "cgi_lib";);//# Prefix of file names, in directory above
generic(    );//# Do not change the following parameters unless you have special reasons
set(  $cgi_lib'bufsize = 8192;   );//# default buffer size when reading multipart
set(  $cgi_lib'maxbound = 100;   );//# maximum boundary length to be encounterd
set(  $cgi_lib'headerout = 0;   );//# indicates whether the header has been printed
generic(    );//# ReadParse
generic(    );//# Reads in GET or POST data, converts it to unescaped text, and puts
generic(    );//# key/value pairs in %in, using "\0" to separate multiple selections
generic(    );//# Returns >0 if there was input, 0 if there was no input
generic(    );//# undef indicates some failure.
generic(    );//# Now that cgi scripts can be put in the normal file space, it is useful
generic(    );//# to combine both the form and the script in one place. If no parameters
generic(    );//# are given (i.e., ReadParse returns FALSE), then a form could be output.
generic(    );//# If a reference to a hash is given, then the data will be stored in that
generic(    );//# hash, but the data from $in and @in will become inaccessable.
generic(    );//# If a variable-glob (e.g., *cgi_input) is the first parameter to ReadParse,
generic(    );//# information is stored there, rather than in $in, @in, and %in.
generic(    );//# Second, third, and fourth parameters fill associative arrays analagous to
generic(    );//# %in with data relevant to file uploads.
generic(    );//# If no method is given, the script will process both command-line arguments
generic(    );//# of the form: name=value and any text that is in $ENV{'QUERY_STRING'}
generic(    );//# This is intended to aid debugging and may be changed in future releases
end(  );// AUTO 

input(  sub ReadParse {  );//
set(  local (*in) = shift if @_;   );//# CGI input
generic(  local (*incfn,   );//# Client's filename (may not be provided)
generic(  *inct,   );//# Client's content-type (may not be provided)
set(  *insfn) = @_;   );//# Server's filename (for spooled files)
set(  local ($len, $type, $meth, $errflag, $cmdflag, $perlwarn, $got);  );//
generic(    );//# Disable warnings as this code deliberately uses local and environment
generic(    );//# variables which are preset to undef (i.e., not explicitly initialized)
set(  $perlwarn = $^W;  );//
set(  $^W = 0;  );//
generic(  binmode(STDIN);   );//# we need these for DOS-based systems
generic(  binmode(STDOUT);   );//# and they shouldn't hurt anything else
generic(  binmode(STDERR);  );//
generic(    );//# Get several useful env variables
set(  $type = $ENV{'CONTENT_TYPE'};  );//
set(  $len = $ENV{'CONTENT_LENGTH'};  );//
set(  $meth = $ENV{'REQUEST_METHOD'};  );//
branch(  if ($len > $cgi_lib'maxdata) {   );//#'
path();//
set(  &CgiDie("cgi_lib.pl: Request to receive too much data: $len bytes\n"););//
bend(  }  );//
branch(  if (!defined $meth || $meth eq '' || $meth eq 'GET' ||    $type eq 'application/x-www-form-urlencoded') {);//
path();//
set(  local ($key, $val, $i);  );//
generic(    );//# Read in text
branch(  if (!defined $meth || $meth eq '') {  );//
path();//
set(  $in = $ENV{'QUERY_STRING'};  );//
set(  $cmdflag = 1;   );//# also use command-line options
path(  } elsif($meth eq 'GET' || $meth eq 'HEAD') {  );//
set(  $in = $ENV{'QUERY_STRING'};  );//
path(  } elsif ($meth eq 'POST') {  );//
branch(  if (($got = read(STDIN, $in, $len) != $len))  );//
path(  {$errflag="Short Read: wanted $len, got $got\n";};  );//
bend();//
path(  } else {  );//
set(  &CgiDie("cgi_lib.pl: Unknown request method: $meth\n"););//
bend(  }  );//
set(  @in = split(/[&;]/,$in);  );//
set(  push(@in, @ARGV) if $cmdflag;   );//# add command-line parameters
loop(  foreach $i (0 .. $#in) {);//#in) {
generic(    );//# Convert plus to space
set(  $in[$i] =~ s/\+/ /g;  );//
generic(    );//# Split into key and value.
set(  ($key, $val) = split(/=/,$in[$i],2);   );//# splits on the first =.
generic(    );//# Convert %XX from hex numbers to alphanumeric
set(  $key =~ s/%([A-Fa-f0-9]{2})/pack("c",hex($1))/ge;  );//
set(  $val =~ s/%([A-Fa-f0-9]{2})/pack("c",hex($1))/ge;  );//
generic(    );//# Associate key and value
set(  $in{$key} .= "\0" if (defined($in{$key}));   );//# \0 is the multiple separator
set(  $in{$key} .= $val;  );//
lend(  }  );//
path(  } elsif ($ENV{'CONTENT_TYPE'} =~ m#^multipart/form-data#) {);//#^multipart/form-data#) {
generic(    );//# for efficiency, compile multipart code only if needed
set(##  $errflag = !(eval <<"END_MULTIPART" ););//  $errflag = !(eval <<'END_MULTIPART' );
set(  local ($buf, $boundary, $head, @heads, $cd, $ct, $fname, $ctype, $blen);  );//
set(  local ($bpos, $lpos, $left, $amt, $fn, $ser);  );//
generic(  local ($bufsize, $maxbound, $writefiles) =  );//
set(  ($cgi_lib'bufsize, $cgi_lib'maxbound, $cgi_lib'writefiles);  );//
generic(    );//# The following lines exist solely to eliminate spurious warning messages
set(  $buf = '';  );//
set(  ($boundary) = $type =~ /boundary="([^"]+)"/;   );//
set(  ($boundary) = $type =~ /boundary=(\S+)/ unless $boundary;  );//
generic(  &CgiDie ("Boundary not provided: probably a bug in your server")  );//
set(  unless $boundary;  );//
set(  $boundary = "--" . $boundary;  );//
set(  $blen = length ($boundary);  );//
branch(  if ($ENV{'REQUEST_METHOD'} ne 'POST') {  );//
path();//
set(  &CgiDie("Invalid request method for multipart/form-data: $meth\n");  );//
bend(  }  );//
branch(  if ($writefiles) {  );//
path();//
set(  local($me);  );//
set(  stat ($writefiles);  );//
set(  $writefiles = "/tmp" unless -d _ && -r _ && -w _;  );//
generic(    );//# ($me) = $0 =~ m#([^/]*)$#;
set(  $writefiles .= "/$cgi_lib'filepre";  );//
bend(  }  );//
generic(    );//# read in the data and split into parts:
generic(    );//# put headers in @in and data in %in
generic(    );//# General algorithm:
generic(    );//# There are two dividers: the border and the '\r\n\r\n' between
generic(    );//# header and body. Iterate between searching for these
generic(    );//# Retain a buffer of size(bufsize+maxbound); the latter part is
generic(    );//# to ensure that dividers don't get lost by wrapping between two bufs
generic(    );//# Look for a divider in the current batch. If not found, then
generic(    );//# save all of bufsize, move the maxbound extra buffer to the front of
generic(    );//# the buffer, and read in a new bufsize bytes. If a divider is found,
generic(    );//# save everything up to the divider. Then empty the buffer of everything
generic(    );//# up to the end of the divider. Refill buffer to bufsize+maxbound
generic(    );//# Note slightly odd organization. Code before BODY: really goes with
generic(    );//# code following HEAD:, but is put first to 'pre-fill' buffers. BODY:
generic(    );//# is placed before HEAD: because we first need to discard any 'preface,'
generic(    );//# which would be analagous to a body without a preceeding head.
set(  $left = $len;  );//
event(  PART:   );//# find each part of the multi-part while reading data
loop(  while (1) {  );//
set(  die $@ if $errflag;  );//
generic(  $amt = ($left > $bufsize+$maxbound-length($buf)  );//
set(  ? $bufsize+$maxbound-length($buf): $left);  );//
set(  $errflag = (($got = read(STDIN, $buf, $amt, length($buf))) != $amt);  );//
set(  die "Short Read: wanted $amt, got $got\n" if $errflag;  );//
set(  $left -= $amt;  );//
set(  $in{$name} .= "\0" if defined $in{$name};  );//
set(  $in{$name} .= $fn if $fn;  );//
set(  $name=~/([-\w]+)/;   );//# This allows $insfn{$name} to be untainted
branch(  if (defined $1) {  );//
path();//
set(  $insfn{$1} .= "\0" if defined $insfn{$1};  );//
set(  $insfn{$1} .= $fn if $fn;  );//
bend(  }  );//
event(  BODY:  );//
loop(  while (($bpos = index($buf, $boundary)) == -1) {  );//
set(  die $@ if $errflag;  );//
branch(  if ($name) {   );//# if no $name, then it's the prologue -- discard
path();//
branch(  if ($fn) { print FILE substr($buf, 0, $bufsize); }  );//
path(  else { $in{$name} .= substr($buf, 0, $bufsize); }  );//
bend();//
bend(  }  );//
set(  $buf = substr($buf, $bufsize);  );//
set(  $amt = ($left > $bufsize ? $bufsize : $left);   );//#$maxbound==length($buf);
set(  $errflag = (($got = read(STDIN, $buf, $amt, $maxbound)) != $amt);  );//
output(  die "Short Read: wanted $amt, got $got\n" if $errflag;  );//
set(  $left -= $amt;  );//
lend(  }  );//
branch(  if (defined $name) {   );//# if no $name, then it's the prologue -- discard
path();//
branch(  if ($fn) { print FILE substr($buf, 0, $bpos-2); }  );//
path(  else { $in {$name} .= substr($buf, 0, $bpos-2); }   );//# kill last \r\n
bend();//
bend(  }  );//
event(  close (FILE);  );//
set(  last PART if substr($buf, $bpos + $blen, 4) eq "--\r\n";  );//
set(  substr($buf, 0, $bpos+$blen+2) = '';  );//
generic(  $amt = ($left > $bufsize+$maxbound-length($buf)  );//
set(  ? $bufsize+$maxbound-length($buf) : $left);  );//
set(  $errflag = (($got = read(STDIN, $buf, $amt, length($buf))) != $amt);  );//
set(  die "Short Read: wanted $amt, got $got\n" if $errflag;  );//
set(  $left -= $amt;  );//
set(  undef $head; undef $fn;  );//
event(  HEAD:  );//
loop(  while (($lpos = index($buf, "\r\n\r\n")) == -1) {  );//
set(  die $@ if $errflag;  );//
set(  $head .= substr($buf, 0, $bufsize);  );//
set(  $buf = substr($buf, $bufsize);  );//
set(  $amt = ($left > $bufsize ? $bufsize : $left);   );//#$maxbound==length($buf);
set(  $errflag = (($got = read(STDIN, $buf, $amt, $maxbound)) != $amt);  );//
set(  die "Short Read: wanted $amt, got $got\n" if $errflag;  );//
set(  $left -= $amt;  );//
lend(  }  );//
set(  $head .= substr($buf, 0, $lpos+2);  );//
set(  push (@in, $head);  );//
set(  @heads = split("\r\n", $head);  );//
set(  ($cd) = grep (/^\s*Content-Disposition:/i, @heads);  );//
set(  ($ct) = grep (/^\s*Content-Type:/i, @heads);  );//
set(  ($name) = $cd =~ /\bname="([^"]+)"/i;   );//
set(  ($name) = $cd =~ /\bname=([^\s:;]+)/i unless defined $name;  );//
set(  ($fname) = $cd =~ /\bfilename="([^"]*)"/i;   );//
set(  ($fname) = $cd =~ /\bfilename=([^\s:;]+)/i unless defined $fname;  );//
generic(  $incfn{$name} .= (defined $in{$name} ? "\0" : "") .  );//
set(  (defined $fname ? $fname : "");  );//
set(  ($ctype) = $ct =~ /^\s*Content-type:\s*"([^"]+)"/i;   );//
set(  ($ctype) = $ct =~ /^\s*Content-Type:\s*([^\s:;]+)/i unless defined $ctype;  );//
set(  $inct{$name} .= (defined $in{$name} ? "\0" : "") . $ctype;  );//
branch(  if ($writefiles && defined $fname) {  );//
path();//
set(  $ser++;  );//
set(  $fn = $writefiles . ".$$.$ser";  );//
set(  open (FILE, ">$fn") || &CgiDie("Couldn't open $fn\n");  );//
generic(  binmode (FILE);   );//# write files accurately
bend(  }  );//
set(  substr($buf, 0, $lpos+4) = '';  );//
set(  undef $fname;  );//
set(  undef $ctype;  );//
lend(} );//
set(1;);//
event(  END_MULTIPART:);//
branch(  if ($errflag));//
path({);//
set(  local ($errmsg, $value);  );//
set(  $errmsg= $@||$errflag;);//
loop(  foreach $value (values %insfn) {  );//
set(  unlink(split("\0",$value));  );//
lend(  }  );//
set(  &CgiDie($errmsg);  );//
path(  } else {  );//
generic(    );//# everything's ok.
bend(  }  );//
path(  } else {  );//
set(  &CgiDie("cgi_lib.pl: Unknown Content-type: $ENV{'CONTENT_TYPE'}\n"););//
bend(  }  );//
generic(    );//# no-ops to avoid warnings
set(  $insfn = $insfn;  );//
set(  $incfn = $incfn;  );//
set(  $inct = $inct;  );//
set(  $^W = $perlwarn;  );//
end(  return ($errflag ? undef : scalar(@in));  );//
end(  }  );//
generic(    );//# PrintHeader
generic(    );//# Returns the magic line which tells WWW that we're an HTML document
end(  );// AUTO 

input(  sub PrintHeader {  );//
generic(  return "Content-type: text/html\n\n";  );//
end(  }  );//
generic(    );//# HtmlTop
generic(    );//# Returns the <head> of a document and the beginning of the body
generic(    );//# with the title and a body <h1> header as specified by the parameter
end(  );// AUTO 

input(  sub HtmlTop  );//
set(  {  );//
set(  local ($title) = @_;  );//
end(  return <<END_OF_TEXT;  );//
generic(  <html>  );//
generic(  <head>  );//
generic(  <title>$title</title>  );//
generic(  </head>  );//
generic(  <body>  );//
generic(  <h1>$title</h1>  );//
event(  END_OF_TEXT);//
end(  }  );//
set(    );//# HtmlBot
generic(    );//# Returns the </body>, </html> codes for the bottom of every HTML page

input(  sub HtmlBot  );//
set(  {  );//
generic(  return "</body>\n</html>\n";  );//
end(  }  );//
set(    );//# SplitParam
generic(    );//# Splits a multi-valued parameter into a list of the constituent parameters

input(  sub SplitParam  );//
set(  {  );//
set(  local ($param) = @_;  );//
set(  local (@params) = split ("\0", $param);  );//
set(  return (wantarray ? @params : $params[0]);  );//
end(  }  );//
generic(    );//# MethGet
generic(    );//# Return true if this cgi call was using the GET request, false otherwise
end(  );// AUTO 

input(  sub MethGet {  );//
set(  return (defined $ENV{'REQUEST_METHOD'} && $ENV{'REQUEST_METHOD'} eq "GET");  );//
end(  }  );//
generic(    );//# MethPost
generic(    );//# Return true if this cgi call was using the POST request, false otherwise
end(  );// AUTO 

input(  sub MethPost {  );//
set(  return (defined $ENV{'REQUEST_METHOD'} && $ENV{'REQUEST_METHOD'} eq "POST");  );//
end(  }  );//
generic(    );//# MyBaseUrl
generic(    );//# Returns the base URL to the script (i.e., no extra path or query string)
end(  );// AUTO 

input(  sub MyBaseUrl {  );//
set(  local ($ret, $perlwarn);  );//
set(  $perlwarn = $^W; $^W = 0;  );//
generic(  $ret = 'http://' . $ENV{'SERVER_NAME'} .  );//
generic(  ($ENV{'SERVER_PORT'} != 80 ? ":$ENV{'SERVER_PORT'}" : '') .  );//
set(  $ENV{'SCRIPT_NAME'};  );//
set(  $^W = $perlwarn;  );//
set(  return $ret;  );//
end(  }  );//
generic(    );//# MyFullUrl
generic(    );//# Returns the full URL to the script (i.e., with extra path or query string)
end(  );// AUTO 

input(  sub MyFullUrl {  );//
set(  local ($ret, $perlwarn);  );//
set(  $perlwarn = $^W; $^W = 0;  );//
generic(  $ret = 'http://' . $ENV{'SERVER_NAME'} .  );//
generic(  ($ENV{'SERVER_PORT'} != 80 ? ":$ENV{'SERVER_PORT'}" : '') .  );//
generic(  $ENV{'SCRIPT_NAME'} . $ENV{'PATH_INFO'} .  );//
set(  (length ($ENV{'QUERY_STRING'}) ? "?$ENV{'QUERY_STRING'}" : '');  );//
set(  $^W = $perlwarn;  );//
set(  return $ret;  );//
end(  }  );//
generic(    );//# MyURL
generic(    );//# Returns the base URL to the script (i.e., no extra path or query string)
generic(    );//# This is obsolete and will be removed in later versions
end(  );// AUTO 

input(  sub MyURL {  );//
generic(  return &MyBaseUrl;  );//
end(  }  );//
generic(    );//# CgiError
generic(    );//# Prints out an error message which which containes appropriate headers,
generic(    );//# markup, etcetera.
generic(    );//# Parameters:
generic(    );//# If no parameters, gives a generic error message
generic(    );//# Otherwise, the first parameter will be the title and the rest will
generic(    );//# be given as different paragraphs of the body
end(  );// AUTO 

input(  sub CgiError {  );//
set(  local (@msg) = @_;  );//
set(  local ($i,$name);  );//
branch(  if (!@msg) {  );//
path();//
set(  $name = &MyFullUrl;  );//
set(  @msg = ("Error: script $name encountered fatal error\n");  );//
bend(  };  );//
branch(  if (!$cgi_lib'headerout) {   );//#')
path();//
output(  print &PrintHeader;  );//
set(  print "<html>\n<head>\n<title>$msg[0]</title>\n</head>\n<body>\n";  );//
bend(  }  );//
set(  print "<h1>$msg[0]</h1>\n";  );//
loop(  foreach $i (1 .. $#msg) {);//#msg) {
set(  print "<p>$msg[$i]</p>\n";  );//
lend(  }  );//
set(  $cgi_lib'headerout++;  );//
end(  }  );//
generic(    );//# CgiDie
generic(    );//# Identical to CgiError, but also quits with the passed error message.
end(  );// AUTO 

input(  sub CgiDie {  );//
set(  local (@msg) = @_;  );//
set(  &CgiError (@msg);  );//
set(  die @msg;  );//
end(  }  );//
generic(    );//# PrintVariables
generic(    );//# Nicely formats variables. Three calling options:
generic(    );//# A non-null associative array - prints the items in that array
generic(    );//# A type-glob - prints the items in the associated assoc array
generic(    );//# nothing - defaults to use %in
generic(    );//# Typical use: &PrintVariables()
end(  );// AUTO 

input(  sub PrintVariables {  );//
set(  local (*in) = @_ if @_ == 1;  );//
set(  local (%in) = @_ if @_ > 1;  );//
set(  local ($out, $key, $output);  );//
set(  $output = "\n<dl compact>\n";  );//
loop(  foreach $key (sort keys(%in)) {  );//
loop(  foreach (split("\0", $in{$key})) {  );//
set(  ($out = $_) =~ s/\n/<br>\n/g;  );//
set(  $output .= "<dt><b>$key</b>\n <dd>:<i>$out</i>:<br>\n";  );//
lend(  }  );//
lend(  }  );//
set(  $output .= "</dl>\n";  );//
set(  return $output;  );//
end(  }  );//
generic(    );//# PrintEnv
generic(    );//# Nicely formats all environment variables and returns HTML string
end(  );// AUTO 

input(  sub PrintEnv {  );//
generic(  &PrintVariables(*ENV);  );//
end(  }  );//
generic(    );//# The following lines exist only to avoid warning messages
set(  $cgi_lib'writefiles = $cgi_lib'writefiles;  );//
set(  $cgi_lib'bufsize = $cgi_lib'bufsize ;  );//
set(  $cgi_lib'maxbound = $cgi_lib'maxbound;  );//
set(  $cgi_lib'version = $cgi_lib'version;  );//
set(  $cgi_lib'filepre = $cgi_lib'filepre;  );//
generic(  ;   );//#return true
end();//

input(# forward declairations );//
process(sub send_mail; );//
set(sub GetUserRecord;);//
set(sub Get_Rec;);//
set(sub VerifyUserNumber;);//
set(sub GetParams;);//
set(sub gets ;);//
set(sub search ;);//
set(sub add ;);//
process(sub validate;);//
end();//

input(sub send_mail { );//
process( local( $sprg, $addr , $sbj, $msg ) = @_; );//
process(  open( SMAIL, "| $sprg -t"); );//
process( print( SMAIL  "To: ", $addr, "\n" , "Subject: ", $sbj,"\n\n", $msg ););//
process( close(SMAIL); );//
end( } );//

input(sub Get_Rec {);//
output();//print "gets\n";
set($data = "";);//
loop(while( eof( FP ) != 1 ) {);//
set( $char = getc( FP ) ;);//
output();//print( " $char  " );
branch(if (  $char eq "\n"    ));//
path( { );//
end(return ;);//break;
path(} else { );//
process();//$data = join("",$user_record ,$char);
process();//$data = join("",$data,"\n");
process($data = join("",$data,$char););//
bend( } );//
lend(} );//
output();//print( "*** $data  **** \n " );
end( } );//

input(sub GetDirArray{);//
set(# CGI input);//  local (@dir );
output();//print "\ngetting dir array\n";
process(open( FP ,  "dirs.txt" )  or die( "authorized user list did not open\n " ););//open( FP ,  "dirs.txt" )  ;
set($count = 0;);//
loop(while( eof( FP) != 1 ) {);//
process(Get_Rec( $data ););//uses $data 
set($dirs[$count]=$data;);//
output();//print "Dir : $data<hr>";
set($count++;);//
lend(} );//
process(close( FP );  );//
end( } );//

input(sub search {);//
process(open( FP ,  "database.tsv" )  or die "database.tsv not opened\n ";);//
set($count = 0;);//
loop(while( length( $param{fname} ) > 0) {);//
process(gets(););//
generic($temp1 = $param{fname} ;);//
generic();//$temp1 =~ tr/A-Z/a-z/;
generic($temp2 = $data ;);//
generic();//$temp2 =~ tr/A-Z/a-z/;
branch(if ( index(  $temp2 ,  $temp1  ) != -1  ));//
path( { );//
set($count++;);//
process(print "$data\n";);//
path(} else { );//
process(print ">>> $data\n";);//
bend( } );//
branch(if ( eof(FP) ));//
path( { );//
process(print "<hr><h2><i>$count matches found for [$param{fname}]</t></h2> ";);//
end(return; );//
bend( } );//
lend(} );//
process(print "<h2><i>$param{name} ... Null  length search string ... no files matched.</t></h2> ";);//
end( } );//

input(sub gets  {);//
set($data = "";);//
loop(while( $char = getc( FP ) ) {);//
branch(if (  $char eq "\n"  ));//
path( { );//
end(return;);//
path(} else { );//
process($data = join("",$data,$char););//
bend( } );//
lend(} );//
end( } );//



;INSECTA EMBEDDED SESSION INFORMATION
; 16777215 16777215 255 4278255615 16711680 16711680 255 16777215 255 255 8404992 0 12632256
;    cgi_lib.pl   #   .
; notepad.exe
;INSECTA EMBEDDED ALTSESSION INFORMATION
; 283 342 772 552 431 112   382   4294953421    perl.key  0