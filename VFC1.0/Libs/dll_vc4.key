[VARIABLES]
	FILE *fp;
	char
	char *tok;
	char *s=strrchr(buff,'.');
	int    i=0;
	int    j=0;
	float  f=0.0;
	double d=0.0;
	char   buff[256];
	class	
	extern
	static
	HWND
	RECT r;
	void
	inline
	NULL;
	TRUE;
	FALSE;
	#define 





[INPUT]
	void main() {  $|$ } //end main()
	void   :: (){  $|$ }
	int    :: (){  $|$ }	
	char   :: (){  $|$ }
	float  :: (){  $|$ }
	double :: (){  $|$ }
	int    (){  $|$ }
	void   (){  $|$ }
	double (){  $|$ }
	char   (){  $|$ }
	inline void   (){  $|$ }
	inline char   (){  $|$ }
	inline int    (){  $|$ }
	inline float  (){  $|$ }
	inline double (){  $|$ }
	int    (){
	void   (){
	double (){
	char   (){
	inline void   (){
	inline char   (){
	inline int    (){
	inline float  (){
	inline double (){
	LRESULT CALLBACK DlgProc(HWND hDlg,UINT uMessage,WPARAM wParam,LPARAM lParam){
	public:
	private:
	protected:
	inline
	/* includes */
	/* defines */
	/* externals */
	/* prototypes */
	/* globals */
	/* end class */





[EVENT]





[PROCESS]
	getchar( );
	wsprintf( ," " );
	wsprintf(buff," " );
	printf("  ");
	fprintf( fp ," " );
	fgetc( fp );
	fopen( " " , " " );
	fclose( fp );
	ungetc( , );
	strcat( , );
	strcpy( , );
	strstr( , );
	strchr( , );
	strrchr( , );
	strlen( );
	SendMessage( ,WM_COMMAND, , );
	PostMessage( ,WM_COMMAND, , );
	DialogBox( hInst, "RESOURCE" , hWnd , (DLGPROC) DlgProc );
	CreateDialog( hInst, "RESOURCE" , hWnd , (DLGPROC) DlgProc );
	GetWindowRect( hDlg , &r );
	GetClientRect( hDlg , &r );
	MessageBox( hWnd, " message ", " title ", MB_OK);
	MessageBeep( MB_OK ); 
	error( "testing" );
	debug( "testing" );





[SET]
	FILE *fp;
	void
	char c;
	char *tok;
	char *tok = strstr( s , TOKEN ); 
	char *s=NULL;
	char buffer;
	int	
	int i=0;
	i++;
	float	
	double
	class	
	extern
	HWND
	RECT r;
	#define 
 	#include".h"
	#include"resource.h"
	#include <insecta.h>
	#include <string.h>
	#include <stdlib.h>
	#include <stdio.h>
	#include <windows.h>
	#include <insecta.h>
	{
	}
	/*
	*/





[OUTPUT]
	#include





[LOOP]
	while( ){
	do{
	for( ){
	for(i=0; i<10; i++ ){





[LEND]
	}  // end while
	}while();
	}  // end for
	}  // end for





[BRANCH]
	if( )  $|$  {  $|$  }
	if( )  $|$  {  $|$ }else{ $|$ }	
	if( )  $|$  {  $|$ }else{ $|$ }else{ $|$ }
	switch( ){
	switch(uMessage) {
	switch(wParam) {
	if( IsIconic( MainWindow ) )
	#ifdef
	#ifndef
	switch(uMessage) {
	switch(wParam) {
	switch(HIWORD(wParam)) {
	switch(LOWORD(wParam)) {





[PATH]
	{
	}else if( ) { 
	case :	
	case WM_INITDIALOG:
	case ID_HELP_ABOUT:
	#else
	#else
	}else{
	case IDCANCEL:
	case IDOK:
	case :{
	case WM_COMMAND:
	case WM_NOTIFY:
	case WM_CLOSE:
	case WM_SIZE:
	default:





[BEND]
	}
	#endif
	#endif






[END]
	};
	}
	return FALSE; }	
	return NULL; }
	return (float)0.0; }
	return 0.0; }
	return TRUE; }
	}
	break;
	break;}
	return ;
	return ;}
	}
	return TRUE;
	return FALSE;
	//
	return NULL;
	exit(0);
	}; /* end of class */
	public:
	protected:
	private:
	getchar( );[EVENT]
	public:
	protected:
	private:
	inline void
	inline int
	inline double
	inline char 
	inline char *





[COMPILE_BUTTON]
	VFCpipe "<VFChooks>\vc4\cmpDLL.BAT" <ExportFileName> |Compile DLL
[BUILD_BUTTON]
	VFCpipe "<VFChooks>\vc4\lnkDLL.BAT" <ExportFileName>.  |Link DLL
[RUN_BUTTON]
	<VFCtool> "TEST_<InsectaFileName>  " |Test DLL
[[HELP_BUTTON]




[TOOLS]
-------------------------SEPARATOR
<VFCtool>  "<VFChooks>\vc4\cmpDLL.ins"    |Compile DLL Settings
<VFCtool>  "<VFChooks>\vc4\lnkDLL.ins"      |Link DLL Settings

---------------------------SEPARATOR
	C:\WINdows\COMMAND.COM   			|DOS Shell
	C:\WINdows\RSRCMTR.EXE				|Resource Meter




[HELP]


[CASE_SENSITIVE]
[MATCH_ORDER]
[COMMENTS]
//
;
[] Begin Misc KeyFile Comments





[] End Misc KeyFile Comments
[DEFAULT_EXTENSION]
	.c
